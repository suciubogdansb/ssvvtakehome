Regression Testing Report – PaymentProcessor.java
TASK 1 – Test Design & Bug Fix

Test Design Techniques Used:
- Black-box Testing: For discount/tax logic and delivery fee behavior
- White-box Testing: For exception handling, boundary cases
- Combinatorial Testing: All combinations of isFirstOrder × PaymentMethod
- Boundary Value Analysis: For delivery fee threshold (49.99 vs 50.0)
- Special Case Testing: Zero, negative, high-value, and rounding cases

Summary of Test Cases (on Version A):
Test Name                                 Purpose                                            Pass

testFirstOrderCreditCard                  | Full 15% discount and 15% tax                   | FAIL
testFirstOrderPayPal                      | 12% discount and 15% tax                        | FAIL
testFirstOrderCash                        | 10% discount and 15% tax                        | FAIL
testNonFirstOrderCreditCard               | 5% discount and 15% tax                         | FAIL
testNonFirstOrderPayPal                   | 2% discount and 15% tax                         | FAIL
testNonFirstOrderCash                     | No discount and 15% tax                         | FAIL
testMinimumValidAmount                    | Test at $0.01 and 15% tax                       | OK
testHighValueAmount                       | Validate large payment and 15% tax              | FAIL
testZeroAmount                            | Exception on 0 amount                           | OK
testNegativeAmount                        | Exception on negative                           | OK
testDeliveryFeeFree                       | No delivery fee at $50                          | OK
testDeliveryFeeFreeAboveThreshold         | No delivery fee at $100                         | OK
testDeliveryFeeCharged                    | Fee applied at $49.99                           | OK
testDeliveryFeeChargedAtZero              | Fee applied at $0                               | OK
testRounding                              | Rounding to 2 decimal places                    | FAIL
testFullOrderBelowDeliveryThreshold       | Workflow with delivery below $50                | OK
testFullOrderBelowDeliveryThresholdPostTax| Workflow with delivery below $50 post discounts | OK
testFullOrderAboveDeliveryThreshold       | Workflow with delivery above $50                | OK
testFullOrderAboveDeliveryThresholdPostTax| Workflow with delivery above $50 post tax       | FAIL




Bug Found:
Incorrect logic: Tax was applied BEFORE discount and the texedAmount variable not utilised.
Fix: Apply tax AFTER discount.

    Old:
    taxedAmount = amount * 1.15
    discountedAmount = amount * (1 - discount)

    New:
    discountedAmount = amount * (1 - discount)
    finalAmount = discountedAmount * 1.15


TASK2 - Test Execution on Version A and B

Test Name - Version A -Version B - Notes

testFirstOrderCreditCard                  | FAIL       | OK        | The original version did not properly apply the tax
testFirstOrderPayPal                      | FAIL       | OK        | Same
testFirstOrderCash                        | FAIL       | OK        | Same
testNonFirstOrderCreditCard               | FAIL       | OK        | Same
testNonFirstOrderPayPal                   | FAIL       | OK        | Same
testNonFirstOrderCash                     | FAIL       | OK        | Same
testHighValueAmount                       | FAIL       | OK        | Same
testRounding                              | FAIL       | OK        | Same
testMinimumValidAmount                    | OK         | OK        | Despite introducing the tax, due to rounding, the test was unaffected
testFullOrderBelowDeliveryThreshold       | OK         | OK        | Still under the threshold post tax
testFullOrderAboveDeliveryThresholdPostTax| FAIL       | OK        | Without the tax, the amount was below the threshold
testFullOrderBelowDeliveryThresholdPostTax| OK         | OK 	   | Despite introducing the tax, the threshold was not exceeded due to discounts

Conclusion:
Version B passes logically correct values.
No new bugs introduced.

TASK 3 – Regression Test Selection

Strategy: Selective Retest Based on Impact
Only tests impacted by discount/tax logic or that depend on `processPayment()` results are re-run.

Selected Tests:
- testFirstOrderCreditCard
- testFirstOrderPayPal
- testFirstOrderCash
- testNonFirstOrderCreditCard
- testNonFirstOrderPayPal
- testHighValueAmount
- testMinimumValidAmount
- testRounding
- testFullOrderBelowDeliveryThreshold
- testFullOrderBelowDeliveryThresholdPostTax
- testFullOrderAboveDeliveryThresholdPostTax


Rationale:
- These tests validate core logic changed in Version B.
- Exception handling and delivery fee boundary tests are unaffected and excluded.

